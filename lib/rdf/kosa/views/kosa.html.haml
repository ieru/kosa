- require 'cgi'
- params['fmt'] ||= :turtle


= partial :import_head

- if @error
  %div.alert.alert-danger.errors
    /%h2
    /  Errors
    %strong= CGI.escapeHTML(@error)

%div
  /%h2
  /    Linked data Import
  %form{:action => "/import", :class => "bs-callout bs-callout-normal", :method => :post, :enctype => "multipart/form-data"}
    %fieldset.url.upload.input
      %h2.h2
        RDF data Import
      /%h4
      /    Data Import form
      %fieldset.url.upload.input
        /%label{:for => :uri}
        /    URI: 
        %p
          URI:<small>(e.g. http://www.fao.org/countryprofiles/geoinfo/geopolitical/resource)</small>
        %input#uri{:name => :uri, :placeholder => 'URI pointing to a RDF repository',:size => 80, :class => "form-control ", :type => :text, :value => params['uri']}
      /%fieldset.input
      /  %legend
      /%p 
      /    Markup:
      /%textarea.input#content{:cols => 128, :class => "form-control ", :name => :content, :rows => 15}= @content
      %fieldset.url.upload.input
        %br
        %h4
          Options
        %p
          %p{:for => :in_fmt}
            Input Format:
          %select#in_fmt{:class => "form-control ", :name => :in_fmt}
            %option{:value => :content, :selected => (:selected if params["in_fmt"].to_s == "content")}
              Content Detect
            - formats(:reader).map(&:to_s).sort.uniq.each do |sym|
              %option{:value => sym, :selected => (:selected if params["in_fmt"].to_s == sym.to_s)}=sym
          %p{:for => :fmt}
            Output Format:
          %select#in_fmt{:class => "form-control ",:name => :fmt}
            - formats(:writer).map(&:to_s).sort.uniq.each do |sym|
              %option{:value => sym, :selected => (:selected if params["fmt"].to_s == sym.to_s)}=sym
        %p
          %label{:for => :debug}
            Show Parser debug information:
          %input#debug{:name => :debug, :type => :checkbox, :value => :true, :checked => params[:debug]}
          %br
          %label{:for => :validate}
            Validate Input:
          %input#validate{:name => :validate, :type => :checkbox, :value => true, :checked => params[:validate]}
          %br
          %label{:for => :vocab_expnsion}
            Expand graph (RDFa only):
          %input#vocab_expansion{:name => :vocab_expansion, :type => :checkbox, :value => true, :checked => params[:vocab_expansion]}
    
          %p{:for => :rdfagraph}
            Output Graph (RDFa only):
          %select#rdfagraph{:class => "form-control ",:name => :rdfagraph}
            - [:output, :processor, :"output,processor"].each do |sym|
              %option{:value => sym, :selected => (:selected if params["rdfagraph"].to_s == sym.to_s)}=sym
          
          %label{:for => :raw}
            Raw Output:
            %input#raw{:name => :raw, :type => :checkbox, :value => true}
            %br
            %br
      %input{:name => :commit, :type => :submit, :value => "Submit", :class => "btn btn-primary"}
  
 
%div.results
  - if @output
    %h2
      Result
    %small
      Note, to see result directly, such as formatted HTML for RDFa output, choose the 'Raw Output' option above.
    %textarea{:class => params["fmt"], :class => "form-control", :rows => 20, :cols => 128}= CGI.escapeHTML(@output)

- if @debug
  %div.debug
    %h2
      Parser Debug Information:
    %textarea{:rows => 20, :class => "form-control ", :cols => 120}= CGI.escapeHTML(@debug.join("\n"))

