!function(factory){"use strict";"function"==typeof define&&define.amd?define(["underscore","backbone"],factory):factory(_,Backbone)}(function(_,Backbone){"use strict";var Subscriber,channels={},delegateEvents=Backbone.View.prototype.delegateEvents,undelegateEvents=Backbone.View.prototype.undelegateEvents;return Backbone.Mediator={subscribe:function(channel,subscription,context,once){channels[channel]||(channels[channel]=[]),channels[channel].push({fn:subscription,context:context||this,once:once})},publish:function(channel){if(channels[channel])for(var subscription,args=[].slice.call(arguments,1),i=0;i<channels[channel].length;i++)subscription=channels[channel][i],subscription.fn.apply(subscription.context,args),subscription.once&&(Backbone.Mediator.unsubscribe(channel,subscription.fn,subscription.context),i--)},unsubscribe:function(channel,fn,context){if(channels[channel])for(var subscription,i=0;i<channels[channel].length;i++)subscription=channels[channel][i],subscription.fn===fn&&subscription.context===context&&(channels[channel].splice(i,1),i--)},subscribeOnce:function(channel,subscription,context){Backbone.Mediator.subscribe(channel,subscription,context,!0)}},Subscriber={delegateEvents:function(){delegateEvents.apply(this,arguments),this.setSubscriptions()},undelegateEvents:function(){undelegateEvents.apply(this,arguments),this.unsetSubscriptions()},subscriptions:{},setSubscriptions:function(subscriptions){subscriptions&&_.extend(this.subscriptions||{},subscriptions),subscriptions=subscriptions||this.subscriptions,subscriptions&&!_.isEmpty(subscriptions)&&(this.unsetSubscriptions(subscriptions),_.each(subscriptions,function(subscription,channel){var once;subscription.$once&&(subscription=subscription.$once,once=!0),_.isString(subscription)&&(subscription=this[subscription]),Backbone.Mediator.subscribe(channel,subscription,this,once)},this))},unsetSubscriptions:function(subscriptions){subscriptions=subscriptions||this.subscriptions,subscriptions&&!_.isEmpty(subscriptions)&&_.each(subscriptions,function(subscription,channel){_.isString(subscription)&&(subscription=this[subscription]),Backbone.Mediator.unsubscribe(channel,subscription.$once||subscription,this)},this)}},_.extend(Backbone.View.prototype,Subscriber),_.extend(Backbone.Mediator,{pub:Backbone.Mediator.publish,sub:Backbone.Mediator.subscribe}),Backbone});