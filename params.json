{"name":"Kosa","tagline":"A lightweight aggregator of Knowledge Organization Systems (KOS)","body":"### [KOS aggregator (kosa)](http://ieru.github.io/kosa)\r\n\r\nA lightweight aggregator of Knowledge Organization Systems (KOS)  \r\n\r\n![Architecture](https://raw.github.com/ieru/kosa/master/kosa.png)\r\n\r\n### Live Demo\r\n\r\nThe current project snapshot may be seen [here](http://edunet.teluria.es/en/#/navigation)\r\n\r\n[![Build Status](https://travis-ci.org/ieru/kosa.png?branch=master)](https://travis-ci.org/ieru/kosa) [![Code Climate](https://codeclimate.com/github/ieru/kosa.png)](https://codeclimate.com/github/ieru/kosa) [![Coverage Status](https://coveralls.io/repos/ieru/kosa/badge.png)](https://coveralls.io/r/ieru/kosa)\r\n\r\n\r\n### Architecture\r\n\r\n- Lightweight Backend ~ 300 LOC\r\n- MVC Frontend (BackboneJs)\r\n- RESTful APi\r\n- Supports almost any database. Relational | Triplestore | Graph\r\n- Scalable\r\n- Indexable Database: PostgeSQL | ElasticSearch\r\n- Supports Cache: Filesystem | Memcached\r\n- Touchscreen / Mobile friendly. Responsive HTML5\r\n\r\n\r\n### Requirements\r\n\r\n- Ruby v1.9+\r\n- Java Application Server (e.g Tomcat, GlashFish, Jetty, JBoss, etc. )\r\n\r\n\r\n### Installation on Debian / Ubuntu\r\n\r\n(tested to work with uSeekM 1.2.0-a5 on a debian/squeezy platform.)\r\n\r\n**Test your ruby installation**\r\n\r\n```\r\n$ ruby -v\r\nruby 1.9 ...\r\n```\r\n\r\n\r\n**Install Database (Sesame + PostgreSQL by default)**\r\n\r\n\r\nInstall java JDK and Tomcat6 servlet container from APT repositories:\r\n```\r\n$ sudo apt-get install sun-java6-jdk tomcat6-admin tomcat6-common tomcat6-examples tomcat6\r\n```\r\n\r\nInstall PostgreSQL database (for indexing)\r\n```\r\n$ sudo apt-get install postgresql-9.1 postgresql-contrib-9.1\r\n```\r\n\r\nCreate a database named 'useekm':\r\n```\r\n$ sudo -u postgres createdb useekm\r\n```\r\n\r\nDownload webapp archives (WARs) to be deployed under Tomcat6 (we choose version 1.2.0-a5):\r\n```\r\n$ sudo mkdir -p ~/packages\r\n$ cd ~/packages\r\n$ sudo wget --no-check-certificate https://dev.opensahara.com/nexus/content/repositories/re\\\r\nleases/com/opensahara/useekm-http-server/1.2.0-a5/useekm-http-server-1.2.0-a5.war\r\n\r\n$ sudo wget --no-check-certificate https://dev.opensahara.com/nexus/content/repositories/re\\\r\nleases/com/opensahara/useekm-http-workbench/1.2.0-a5/useekm-http-workbench-1.2.0-a5.war\r\n```\r\n\r\nCopy and rename archives into Tomcat6's webapp directory (requires restart to take effect). \r\nAfterwards, visit Tomcat's admin interface, at ````http://localhost:8080/manager/html```` and \r\nverify that the archives are properly deployed and hosted under the appropriate \r\nURL prefix (i.e. ````/openrdf-sesame```` and ````/openrdf-workbench````):\r\n```\r\n# cp ~/packages/useekm-http-workbench-1.2.0-a5.war /var/lib/tomcat6/webapps/openrdf-workbench.war\r\n# cp ~/packages/useekm-http-server-1.2.0-a5.war    /var/lib/tomcat6/webapps/openrdf-sesame.war\r\n# /etc/init.d/tomcat6 restart\r\n```\r\n\r\nNow a new RDF repository should be created with a set of minimal configuration options. \r\nLet's name it \"geoknow\":\r\n```\r\n# mkdir -p /var/opt/useekm/geoknow\r\n```\r\n\r\nCreate a configuration file for your repository at ````/var/opt/useekm/geoknow/config.xml```` \r\nby editing the following template:\r\n```\r\n<beans xmlns=\"http://www.springframework.org/schema/beans\" \r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n    xsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd\">\r\n\r\n    <!-- The id \"repository\" is mandatory! -->\r\n    <bean id=\"repository\" class=\"org.openrdf.repository.sail.SailRepository\">\r\n        <constructor-arg>\r\n            <bean class=\"com.useekm.indexing.IndexingSail\">\r\n                <constructor-arg ref=\"sail\" />\r\n                <constructor-arg ref=\"indexerSettings\" />\r\n            </bean>\r\n        </constructor-arg>\r\n    </bean>\r\n\r\n    <!-- This example uses the NativeStore as the underlying sail, you could also use the MemoryStore -->\r\n    <bean id=\"sail\" class=\"org.openrdf.sail.nativerdf.NativeStore\" />\r\n\r\n    <!-- Please customize the indexer settings: -->\r\n    <bean id=\"indexerSettings\" lazy-init=\"true\" class=\"com.useekm.indexing.postgis.PostgisIndexerSettings\">\r\n        <property name=\"defaultSearchConfig\" value=\"simple\" />\r\n        <property name=\"dataSource\" ref=\"pgDatasource\" />\r\n        <property name=\"matchers\">\r\n            <list>\r\n                <!-- CUSTOMIZE: list all the predicates that need indexing (text and/or geo): -->\r\n                <bean class=\"com.useekm.indexing.postgis.PostgisIndexMatcher\">\r\n                    <property name=\"predicate\" value=\"http://www.w3.org/2000/01/rdf-schema#label\" />\r\n                    <property name=\"searchConfig\" value=\"simple\" />\r\n                </bean>\r\n                <bean class=\"com.useekm.indexing.postgis.PostgisIndexMatcher\">\r\n                    <property name=\"predicate\" value=\"http://www.opengis.net/ont/geosparql#asWKT\" />\r\n                </bean>\r\n            </list>\r\n        </property>\r\n        <!-- You can add additional configuration, such as index partitions to optimize performance. See the documentation. -->\r\n    </bean>\r\n\r\n    <bean id=\"pgDatasource\" lazy-init=\"true\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\r\n        <property name=\"driverClassName\" value=\"org.postgresql.Driver\"/>\r\n        <property name=\"url\" value=\"jdbc:postgresql://localhost:5432/useekm\"/>    <!-- CUSTOMIZE! -->\r\n        <property name=\"username\" value=\"postgres\"/>                              <!-- CUSTOMIZE! -->\r\n        <property name=\"password\" value=\"postgres\"/>                              <!-- CUSTOMIZE! -->\r\n    </bean>\r\n</beans>\r\n```\r\n\r\nFinally, change ownership of the directories that expect server output (logs etc.):\r\n```\r\n# chown root:tomcat6 -R /usr/share/tomcat6/.aduna/openrdf-sesame\r\n# chmod 0775         -R /usr/share/tomcat6/.aduna/openrdf-sesame\r\n```\r\n\r\nRestart Tomcat6 and visit ````http://localhost:8080/openrdf-workbench````.  \r\n\r\nYou should be able to create a new server instance by using ````http://127.0.0.1:8080/openrdf-sesame```` \r\nas the address. Note that this is a local (to the Tomcat instance) address.\r\nAfterwards, you should be able to create a new repository named 'geoknow'. Specify the \r\nserver's absolute file path of the configuration file (that is ````/var/opt/useekm/geoknow/config.xml````)\r\n\r\n**Using Sesame with a different Indexer (ElasticSearch)**\r\n\r\n```\r\nTBD\r\n```\r\n\r\n**Deploying on a different Database**\r\n\r\n- 4Store (tbd)  \r\n\r\nVisit [this Wiki page]()\r\n\r\n- Virtuoso (tbd)  \r\n\r\nVisit [this Wiki page]()\r\n\r\n- SQLite (tbd)  \r\n\r\nVisit [this Wiki page]()\r\n\r\n- PostgreSQL (tbd)  \r\n\r\nVisit [this Wiki page]()\r\n\r\n**Fill your Database**  \r\n\r\n*Creating a Backoffice-Importer*\r\n```\r\nTBD\r\n```\r\n\r\n**Install Kosa**\r\n\r\n```\r\n$ wget https://github.com/ieru/kosa/archive/master.zip\r\n$ unzip master.zip\r\n$ cd kosa\r\n```\r\n\r\nInstall required gems\r\n```\r\n(if you use rvm, type 'rvm all do gem install __GEMS BELOW__')  \r\n\r\n$ sudo gem install bundle bundler sinatra nokogiri rest-client json dm-core dm-sqlite-adapter rdf \\\r\nrdf-aggregate-repo rdf-isomorphic rdf-json rdf-microdata rdf-n3 rdf-rdfa rdf-rdfxml rdf-turtle \\\r\nrdf-trig rdf-xsd rdf-4store json-ld linkeddata sparql sinatra-respond_to sparql-client \r\n```\r\n\r\nCreate Bundle\r\n```\r\n$ ./bundle.sh\r\n$ ./bundle.dpl.sh\r\n```\r\n\r\n### Installation on Mac OS X\r\n\r\n```\r\nTBD\r\n```\r\n\r\n### Installation on Windows\r\n\r\n```\r\nTBD\r\n```\r\n\r\n### Installation on a PaaS (e.g AWS, Heroku, etc.)\r\n\r\n**Heroku**  \r\n```\r\nTBD\r\n```\r\n\r\n**Amazon Web Services**\r\n```\r\nTBD\r\n```\r\n\r\n### Running on a Development Server (Windows / Mac OS / Linux)\r\n\r\n```\r\n$ sudo rackup config.ru\r\n( use '$ sudo rvm all do rackup config.ru', if you are using rvm )\r\n...\r\n[2013-11-04 23:22:27] INFO  WEBrick 1.3.1\r\n[2013-11-04 23:22:27] INFO  ruby 1.9.2 (2012-04-20) [x86_64-darwin12.5.0]\r\n[2013-11-04 23:22:27] INFO  WEBrick::HTTPServer#start: pid=53704 port=4568\r\n```\r\n\r\nNow, open your browser and type ````http://localhost:4568````\r\n\r\n### Running on a Production Server (Debian / Ubuntu Linux)\r\n\r\nA good option for Linux servers is to use NGINX + Passenger. You can deploy \r\nboth servers by running the command below\r\n\r\n    # copy-and-paste all in one line\r\n    \r\n    curl -L https://raw.github.com/julianromerajuarez/ubuntu\\\r\n    -debian-nginx-passenger-installer/master/install.sh | bash \r\n\r\nYou can get more information about this script [here](https://github.com/julianromerajuarez/ubuntu-debian-nginx-passenger-installer)\r\n\r\n### Running on a Production Server (PaaS)\r\n\r\n```\r\nTBD\r\n```\r\n\r\n### Javascript, templates & css changes\r\n\r\nSince Front and Back are now completely separated, to modify html, javascript or\r\nstyles follow these steps:  \r\n\r\n    \r\nDownload and install [node.js](http://nodejs.org/download/)\r\n    \r\n    $ sudo npm install -g brunch\r\n    \r\n    $ cd __YOUR_SITE_DIR__/public.dev\r\n    $ ./deploy.sh\r\n\r\n    Compiling assets ...\r\n    11 Nov 05:57:39 - info: compiled 30 files and 2 cached into 7 files, copied 14 in 3905ms\r\n    Deploying assets ...\r\n    Done. Created ./../public\r\n    \r\n    ( refresh your browser )\r\n\r\n### Troubleshooting\r\n\r\n[Troubleshooting](https://github.com/ieru/kosa/wiki/Troubleshooting)\r\n\r\n### Documentation and API access\r\n\r\n[API](https://github.com/ieru/kosa/wiki/Kosa-RESTful-API)\r\n\r\n\r\n### Optional Features\r\n\r\nPluggable databases:\r\n- Sesame\r\n- SQLite\r\n- PostgreSQL \r\n- Casandra\r\n- MongoDB\r\n- RedStore\r\n- 4-store\r\n- Virtuoso\r\n- AllegroGraph\r\n\r\nCaches:\r\n- FileStore (default)\r\n- Memcached\r\n\r\nIndexers:\r\n- Sesame + [Postgres - uSeekM Indexer](https://dev.opensahara.com/projects/useekm)\r\n- Sesame + [ElasticSearch - uSeekM Indexer](https://dev.opensahara.com/projects/useekm)\r\n\r\n\r\n### Resources\r\n\r\n- [HTML5 Canvas](http://www.w3.org/html/logo/)\r\n- [Ruby](https://www.ruby-lang.org)\r\n- [Sinatra](http://www.sinatrarb.com/)\r\n- [Sesame](http://www.openrdf.org/)\r\n- [PostgreSQL](), [Casandra](), [MongoDB](), [RedStore](), [4-store](), [AllegroGraph]()\r\n- [Backbonejs](http://backbonejs.org/)\r\n- [Handlebarjs](http://handlebarsjs.com/)\r\n- [SASS](http://sass-lang.com/)\r\n- [Bootstrap 3.0](http://getbootstrap.com/)\r\n- [Memcached](http://memcached.org/)\r\n- [UseekM Indexer](https://dev.opensahara.com/projects/useekm)\r\n- [ElasticSearch](http://www.elasticsearch.org/)\r\n\r\n\r\n### Author\r\n\r\nUniversity of Alcalá\r\n\r\n### 'License'\r\n\r\nThis is free and unemcumbered software released into the public domain. For more information, see the accompanying UNLICENSE file.\r\n\r\nIf you're unfamiliar with public domain, that means it's perfectly fine to start with this skeleton and code away, later relicensing as you see fit.\r\n\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}